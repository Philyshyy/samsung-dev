generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
    id Int @id @default(autoincrement())

    name     String
    email    String   @unique
    password String   @unique
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
    series   Series[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    items    ProductItem[]
    series   Series        @relation(fields: [seriesId], references: [id])
    seriesId Int

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem {
    id Int @id @default(autoincrement())

    price Int
    color String?
    size  Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    token String

    totalAmount Int        @default(0)
    items       CartItem[]

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    name   String
    email  String
    phone  String
    adress String

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

model Series {
    id Int @id @default(autoincrement())

    name       String    @unique
    products   Product[]
    category   Category  @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELEED
}

enum UserRole {
    USER
    ADMIN
}
